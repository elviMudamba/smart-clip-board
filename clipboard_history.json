[
  {
    "text": "button_layout.setSpacing(4)     ",
    "type": "text",
    "timestamp": "2025-04-16 16:40:16"
  },
  {
    "text": "def update_list(self):\n    self.list_widget.clear()\n    for item in self.history:\n        content_type = item.get(\"type\", \"text\")\n        icon_map = {\n            \"text\": \"\ud83d\udcdd\", \"image\": \"\ud83d\uddbc\ufe0f\", \"video\": \"\ud83c\udfa5\", \"audio\": \"\ud83c\udfb5\",\n            \"file\": \"\ud83d\udcc1\", \"link\": \"\ud83d\udd17\", \"code\": \"\ud83d\udcbb\",\n            \"email\": \"\ud83d\udce7\", \"phone\": \"\ud83d\udcde\",\n        }\n        icon = icon_map.get(content_type, \"\ud83d\udccb\")\n        text = item.get(\"text\", \"\")\n        snippet = text[:60]\n        timestamp = item.get(\"timestamp\") or \"Unknown time\"\n\n        # Main widget\n        item_widget = QWidget()\n        layout = QVBoxLayout(item_widget)\n        layout.setContentsMargins(10, 6, 10, 6)\n\n        # Labels\n        text_label = QLabel(f\"{icon} {snippet}\" + (\"...\" if len(text) > 60 else \"\"))\n        text_label.setStyleSheet(\"font-weight: bold;\")\n        timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n        timestamp_label.setStyleSheet(\"color: #888; font-size: 11px;\")\n\n        layout.addWidget(text_label)\n        layout.addWidget(timestamp_label)\n\n        # \ud83d\udc49 Button layout\n        button_layout = QHBoxLayout()\n        layout.addLayout(button_layout)\n\n        # \ud83d\udc49 Define add_btn helper function inside update_list\n        def add_btn(emoji, tooltip, handler, text, color=\"#3a3a3a\"):\n            btn = QPushButton(emoji)\n            btn.setToolTip(tooltip)\n            btn.setFixedSize(30, 24)\n            btn.clicked.connect(lambda _, t=text: handler(t))\n            btn.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: {color};\n                    color: white;\n                    font-weight: bold;\n                    border: none;\n                    border-radius: 6px;\n                }}\n                QPushButton:hover {{\n                    background-color: #5a5a5a;\n                }}\n            \"\"\")\n            button_layout.addWidget(btn)\n\n        # \ud83d\udc49 Add buttons\n        add_btn(\"\u270f\", \"Edit & Paste\", self.handle_edit, text, \"#4285F4\")\n        add_btn(\"\ud83d\udd20\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text, \"#34A853\")\n        add_btn(\"\ud83d\udd21\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text, \"#34A853\")\n        add_btn(\"\ud83e\uddf9\", \"Strip\", lambda t: self.handle_transform(t.strip()), text, \"#FBBC05\")\n        add_btn(\"\ud83d\udebf\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text, \"#EA4335\")\n\n        # Add to QListWidget\n        list_item = QListWidgetItem()\n        list_item.setSizeHint(item_widget.sizeHint())\n        self.list_widget.addItem(list_item)\n        self.list_widget.setItemWidget(list_item, item_widget)\n",
    "type": "code",
    "timestamp": "2025-04-16 16:39:26"
  },
  {
    "text": "add_btn(\"\u270f\ufe0f\", \"Edit & Paste\", self.handle_edit, \"#4285F4\")  # Blue\nadd_btn(\"\ud83d\udd20\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), \"#34A853\")  # Green\nadd_btn(\"\ud83d\udd21\", \"lowercase\", lambda t: self.handle_transform(t.lower()), \"#34A853\")\nadd_btn(\"\ud83e\uddf9\", \"Strip\", lambda t: self.handle_transform(t.strip()), \"#FBBC05\")  # Yellow\nadd_btn(\"\ud83d\udebf\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), \"#EA4335\")  # Red\n",
    "type": "text",
    "timestamp": "2025-04-16 16:30:23"
  },
  {
    "text": "QPushButton {\n    background-color: #3a3a3a;\n    color: white;\n    font-weight: bold;\n    border: none;\n    border-radius: 6px;\n    padding: 4px;\n}\n\nQPushButton:hover {\n    background-color: #5a5a5a;\n}\n\nQPushButton:pressed {\n    background-color: #2e7031;\n}\n",
    "type": "text",
    "timestamp": "2025-04-16 16:29:30"
  },
  {
    "text": "self.setStyleSheet",
    "type": "text",
    "timestamp": "2025-04-16 16:29:21"
  },
  {
    "text": "\n    from PyQt5.QtWidgets import QPushButton, QHBoxLayout",
    "type": "code",
    "timestamp": "2025-04-16 16:27:40"
  },
  {
    "text": "\n    from PyQt5.QtWidgets import QPushButton, QHBoxLayout",
    "type": "code",
    "timestamp": "2025-04-16 16:27:21"
  },
  {
    "text": "def handle_transform(self, transformed):\n    dialog = TransformPreviewDialog(\"\", transformed, self)\n    if dialog.exec_() == QDialog.Accepted:\n        final = dialog.get_transformed_text()\n        if self.on_item_selected:\n            self.on_item_selected(final)\n        self.close()\n\ndef handle_edit(self, original):\n    edited, ok = QInputDialog.getMultiLineText(self, \"Edit Text\", \"Modify the text:\", original)\n    if ok and edited.strip():\n        if self.on_item_selected:\n            self.on_item_selected(edited.strip())\n        self.close()\n",
    "type": "code",
    "timestamp": "2025-04-16 16:26:50"
  },
  {
    "text": "def handle_transform(self, transformed):\n    dialog = TransformPreviewDialog(\"\", transformed, self)\n    if dialog.exec_() == QDialog.Accepted:\n        final = dialog.get_transformed_text()\n        if self.on_item_selected:\n            self.on_item_selected(final)\n        self.close()\n\ndef handle_edit(self, original):\n    edited, ok = QInputDialog.getMultiLineText(self, \"Edit Text\", \"Modify the text:\", original)\n    if ok and edited.strip():\n        if self.on_item_selected:\n            self.on_item_selected(edited.strip())\n        self.close()",
    "type": "code",
    "timestamp": "2025-04-16 16:26:49"
  },
  {
    "text": "SearchWindow",
    "type": "text",
    "timestamp": "2025-04-16 16:26:33"
  },
  {
    "text": "from PyQt5.QtWidgets import QPushButton, QHBoxLayout",
    "type": "code",
    "timestamp": "2025-04-16 16:26:14"
  },
  {
    "text": "from PyQt5.QtWidgets import QPushButton, QHBoxLayout\n\ndef update_list(self):\n    self.list_widget.clear()\n    for item in self.history:\n        content_type = item.get(\"type\", \"text\")\n        icon_map = {\n            \"text\": \"\ud83d\udcdd\", \"image\": \"\ud83d\uddbc\ufe0f\", \"video\": \"\ud83c\udfa5\", \"audio\": \"\ud83c\udfb5\",\n            \"file\": \"\ud83d\udcc1\", \"link\": \"\ud83d\udd17\", \"code\": \"\ud83d\udcbb\", \"email\": \"\ud83d\udce7\", \"phone\": \"\ud83d\udcde\"\n        }\n        icon = icon_map.get(content_type, \"\ud83d\udccb\")\n        text_snippet = item.get(\"text\", \"\")[:60]\n        full_text = item.get(\"text\", \"\")\n        raw_timestamp = item.get(\"timestamp\")\n        timestamp = raw_timestamp if raw_timestamp else \"Unknown time\"\n\n        # \ud83e\uddf1 Item Widget\n        item_widget = QWidget()\n        main_layout = QVBoxLayout(item_widget)\n        main_layout.setContentsMargins(10, 6, 10, 6)\n\n        # \ud83d\udcdd Text and timestamp\n        text_label = QLabel(f\"{icon} {text_snippet}\" + (\"...\" if len(full_text) > 60 else \"\"))\n        text_label.setStyleSheet(\"font-weight: bold;\")\n\n        timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n        timestamp_label.setStyleSheet(\"color: #888; font-size: 11px;\")\n\n        main_layout.addWidget(text_label)\n        main_layout.addWidget(timestamp_label)\n\n        # \ud83c\udf9b\ufe0f Action Buttons\n        button_layout = QHBoxLayout()\n\n        def add_btn(emoji, tooltip, handler):\n            btn = QPushButton(emoji)\n            btn.setToolTip(tooltip)\n            btn.setFixedSize(30, 24)\n            btn.clicked.connect(lambda _, text=full_text: handler(text))\n            button_layout.addWidget(btn)\n\n        add_btn(\"\u270f\ufe0f\", \"Edit & Paste\", self.handle_edit)\n        add_btn(\"\ud83d\udd20\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()))\n        add_btn(\"\ud83d\udd21\", \"lowercase\", lambda t: self.handle_transform(t.lower()))\n        add_btn(\"\ud83e\uddf9\", \"Strip\", lambda t: self.handle_transform(t.strip()))\n        add_btn(\"\ud83d\udebf\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()))\n\n        main_layout.addLayout(button_layout)\n\n        # \ud83d\udccb Add to ListWidget\n        list_item = QListWidgetItem()\n        list_item.setSizeHint(item_widget.sizeHint())\n        self.list_widget.addItem(list_item)\n        self.list_widget.setItemWidget(list_item, item_widget)\n",
    "type": "code",
    "timestamp": "2025-04-16 16:25:16"
  },
  {
    "text": " menu = QMenu()",
    "type": "text",
    "timestamp": "2025-04-16 16:22:38"
  },
  {
    "text": " menu = QMenu()",
    "type": "text",
    "timestamp": "2025-04-16 16:21:35"
  },
  {
    "text": "fancy_action = menu.addAction(\"\ud83e\ude84 Fancy Preview\")",
    "type": "text",
    "timestamp": "2025-04-16 16:21:12"
  },
  {
    "text": "guest@debian:~/Desktop/dreamache/KlipFusionApp/smart-clip-board$ python main.py\nelvo",
    "type": "text",
    "timestamp": "2025-04-16 16:19:25"
  },
  {
    "text": "guest@debian:~/Desktop/dreamache/KlipFusionApp/smart-clip-board$ python main.py\n",
    "type": "text",
    "timestamp": "2025-04-16 16:18:54"
  },
  {
    "text": " background-color: #4CAF50;\n            color: white;\n            font-weight: bold;\n            font-size: 14px;\n            border-radius: 8px;\n            padding: 8px 16px;\ndisplay flex",
    "type": "text",
    "timestamp": "2025-04-16 16:18:02"
  },
  {
    "text": "guest@debian:~/Desktop/dreamache/KlipFusionApp/smart-clip-board$ python main.py\nelvis",
    "type": "text",
    "timestamp": "2025-04-16 16:15:26"
  },
  {
    "text": "guest@debian:~/Desktop/dreamache/KlipFusionApp/smart-clip-board$ python main.py\n",
    "type": "text",
    "timestamp": "2025-04-16 16:14:39"
  },
  {
    "text": " background-color: #4CAF50;\n            color: white;\n            font-weight: bold;\n            font-size: 14px;\n            border-radius: 8px;\n            padding: 8px 16px;\ndisplay flex",
    "type": "text",
    "timestamp": "2025-04-16 16:13:50"
  },
  {
    "text": "background-color: #4CAF50; color: white; font-weight: bold; font-size: 14px; border-radius: 8px; padding: 8px 16px;",
    "type": "text",
    "timestamp": "2025-04-16 16:13:11"
  },
  {
    "text": " background-color: #4CAF50;\n            color: white;\n            font-weight: bold;\n            font-size: 14px;\n            border-radius: 8px;\n            padding: 8px 16px;\ndisplay flex",
    "type": "text",
    "timestamp": "2025-04-16 16:13:07"
  },
  {
    "text": " background-color: #4CAF50;\n            color: white;\n            font-weight: bold;\n            font-size: 14px;\n            border-radius: 8px;\n            padding: 8px 16px;",
    "type": "text",
    "timestamp": "2025-04-16 16:12:35"
  },
  {
    "text": " background-color: #4CAF50;\n            color: white;\n            font-weight: bold;\n            font-size: 14px;\n            border-radius: 8px;\n            padding: 8px 16px;\n            display: flex;",
    "type": "text",
    "timestamp": "2025-04-16 16:12:02"
  },
  {
    "text": " background-color: #4CAF50;\n            color: white;\n            font-weight: bold;\n            font-size: 14px;\n            border-radius: 8px;\n            padding: 8px 16px;",
    "type": "text",
    "timestamp": "2025-04-16 16:11:13"
  },
  {
    "text": "from PyQt5.QtWidgets import (\n    QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel, QDialog, QSizePolicy\n)\nfrom PyQt5.QtGui import QFont, QPalette, QColor\nfrom PyQt5.QtCore import Qt wsw",
    "type": "code",
    "timestamp": "2025-04-16 16:10:54"
  },
  {
    "text": "from PyQt5.QtWidgets import (\n    QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel, QDialog, QSizePolicy\n)\nfrom PyQt5.QtGui import QFont, QPalette, QColor\nfrom PyQt5.QtCore import Qt",
    "type": "code",
    "timestamp": "2025-04-16 16:10:33"
  },
  {
    "text": "from PyQt5.QtWidgets import (\n    QVBoxLayout, QHBoxLayout, QTextEdit, QPushButton, QLabel, QDialog, QSizePolicy\n)\nfrom PyQt5.QtGui import QFont, QPalette, QColor\nfrom PyQt5.QtCore import Qt",
    "type": "code",
    "timestamp": "2025-04-16 16:07:39"
  },
  {
    "text": "def init_ui(self):\n    layout = QVBoxLayout(self)\n    layout.setContentsMargins(20, 20, 20, 20)\n    layout.setSpacing(15)\n\n    # Header labels\n    header_layout = QHBoxLayout()\n    original_label = QLabel(\"\ud83d\udcdd Original\")\n    transformed_label = QLabel(\"\u2728 Transformed\")\n\n    for label in (original_label, transformed_label):\n        label.setFont(QFont(\"Segoe UI\", 12, QFont.Bold))\n        label.setStyleSheet(\"color: #cccccc;\")\n        label.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Fixed)\n\n    header_layout.addWidget(original_label)\n    header_layout.addWidget(transformed_label)\n    layout.addLayout(header_layout)\n\n    # Text areas\n    split_layout = QHBoxLayout()\n\n    self.original_edit = QTextEdit()\n    self.original_edit.setReadOnly(True)\n    self.original_edit.setPlainText(self.original_text)\n\n    self.transformed_edit = QTextEdit()\n    self.transformed_edit.setPlainText(self.transformed_text)\n\n    for editor in (self.original_edit, self.transformed_edit):\n        editor.setStyleSheet(\"\"\"\n            QTextEdit {\n                background-color: #1e1e1e;\n                color: #f0f0f0;\n                border: 1px solid #444;\n                border-radius: 10px;\n                padding: 10px;\n                font-family: 'Fira Code', 'Consolas', monospace;\n                font-size: 14px;\n            }\n        \"\"\")\n        editor.setMinimumWidth(280)\n\n    split_layout.addWidget(self.original_edit)\n    split_layout.addWidget(self.transformed_edit)\n\n    layout.addLayout(split_layout)\n\n    # Apply Button\n    apply_button = QPushButton(\"\u2705 Apply\")\n    apply_button.setFixedSize(120, 36)\n    apply_button.clicked.connect(self.apply)\n    apply_button.setStyleSheet(\"\"\"\n        QPushButton {\n            background-color: #4CAF50;\n            color: white;\n            font-weight: bold;\n            font-size: 14px;\n            border-radius: 8px;\n            padding: 8px 16px;\n        }\n        QPushButton:hover {\n            background-color: #45a049;\n        }\n    \"\"\")\n\n    layout.addWidget(apply_button, alignment=Qt.AlignRight)\n\n    # Optional window styling\n    self.setStyleSheet(\"\"\"\n        QDialog {\n            background-color: #2b2b2b;\n            color: #ffffff;\n        }\n    \"\"\")",
    "type": "code",
    "timestamp": "2025-04-16 16:06:56"
  }
]