[
  {
    "text": "its showing 1 copied item only in the window def update_list(self, items=None):\n        self.list_widget.clear()\n        items = items or self.history\n        print(\"History items:\", items)  # Debug the history\n\n        for item in items:\n            content_type = item.get(\"type\", \"text\")\n            text = item.get(\"text\", \"\")\n            timestamp = item.get(\"timestamp\") or \"Unknown time\"\n            print(f\"Item: type={content_type}, text={text}, timestamp={timestamp}\")\n\n            # Create the item widget and main layout\n            item_widget = QWidget()\n            main_layout = QVBoxLayout()\n            main_layout.setContentsMargins(12, 20, 12, 8)\n            main_layout.setSpacing(6)\n\n            # Prepare snippet for text display\n            snippet = text[:60]\n\n            # Check if content is an image\n        image_extensions = (\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\")\n        is_image = any(text.lower().endswith(ext) for ext in image_extensions) and os.path.exists(text)\n\n        if is_image:\n            print(f\"Trying to load image: {text}\")\n            image_label = QLabel()\n            image = QImage(text)\n\n            if image.isNull():\n                print(f\"Failed to load image: {text}\")\n                image_label.setText(\"Failed to load image.\")\n            else:\n                pixmap = QPixmap.fromImage(image)\n                pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                image_label.setPixmap(pixmap)\n                image_label.setAlignment(Qt.AlignCenter)\n                image_label.setMinimumSize(300, 300)\n\n            main_layout.addWidget(image_label)\n            snippet = \"\"\n        else:\n            # Fallback for non-image or failed image\n            text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n            text_label.setStyleSheet(\"font-weight: regular;\")\n            main_layout.addWidget(text_label)\n\n\n            # Add timestamp label\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            main_layout.addWidget(timestamp_label)\n\n            # Add transformation buttons (unchanged)\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                btn = QPushButton()\n                btn.setIcon(QIcon(icon_path))\n                btn.setIconSize(QSize(16, 16))\n                btn.setToolTip(tooltip)\n                btn.setFixedSize(32, 28)\n                btn.clicked.connect(lambda _, t=text: handler(t))\n\n                effect = QGraphicsOpacityEffect()\n                effect.setOpacity(0.0)\n                btn.setGraphicsEffect(effect)\n                btn.setEnabled(False)\n\n                fade_anim = QPropertyAnimation(effect, b\"opacity\")\n                fade_anim.setDuration(300)\n                fade_anim.setStartValue(0.0)\n                fade_anim.setEndValue(1.0)\n                fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n                btn.setStyleSheet(f\"\"\"\n                    QPushButton {{\n                        background-color: transparent;\n                        border-radius: 2px;\n                        padding: 4px;\n                        border: 1px solid green;\n                    }}\n                    QPushButton:hover {{\n                        background-color: #5a5a5a;\n                    }}\n                \"\"\")\n\n                btn._fade_anim = fade_anim\n\n                def animate_in():\n                    btn.setEnabled(True)\n                    fade_anim.setDirection(QPropertyAnimation.Forward)\n                    fade_anim.start()\n\n                def animate_out():\n                    fade_anim.setDirection(QPropertyAnimation.Backward)\n                    fade_anim.start()\n                    btn.setEnabled(False)\n\n                btn.animate_in = animate_in\n                btn.animate_out = animate_out\n\n                button_layout.addWidget(btn)\n                buttons.append((btn, effect))\n\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)\n            item_widget.setLayout(main_layout)\n            item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n            def enterEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_in()\n                QWidget.enterEvent(item_widget, event)\n\n            def leaveEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_out()\n                QWidget.leaveEvent(item_widget, event)\n\n            item_widget.enterEvent = enterEvent\n            item_widget.leaveEvent = leaveEvent\n\n            container = QWidget()\n            container_layout = QVBoxLayout(container)\n            container_layout.setContentsMargins(0, 0, 18, 18)\n            container_layout.addWidget(item_widget)\n\n            list_item = QListWidgetItem()\n            list_item.setSizeHint(container.sizeHint())\n            list_item.setData(Qt.UserRole, text)\n            self.list_widget.addItem(list_item)\n            self.list_widget.setItemWidget(list_item, container)",
    "type": "code",
    "timestamp": "2025-04-25 21:30:05"
  },
  {
    "text": "def update_list(self, items=None):\n        self.list_widget.clear()\n        items = items or self.history\n        print(\"History items:\", items)  # Debug the history\n\n        for item in items:\n            content_type = item.get(\"type\", \"text\")\n            text = item.get(\"text\", \"\")\n            timestamp = item.get(\"timestamp\") or \"Unknown time\"\n            print(f\"Item: type={content_type}, text={text}, timestamp={timestamp}\")\n\n            # Create the item widget and main layout\n            item_widget = QWidget()\n            main_layout = QVBoxLayout()\n            main_layout.setContentsMargins(12, 20, 12, 8)\n            main_layout.setSpacing(6)\n\n            # Prepare snippet for text display\n            snippet = text[:60]\n\n            # Check if content is an image\n        image_extensions = (\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\")\n        is_image = any(text.lower().endswith(ext) for ext in image_extensions) and os.path.exists(text)\n\n        if is_image:\n            print(f\"Trying to load image: {text}\")\n            image_label = QLabel()\n            image = QImage(text)\n\n            if image.isNull():\n                print(f\"Failed to load image: {text}\")\n                image_label.setText(\"Failed to load image.\")\n            else:\n                pixmap = QPixmap.fromImage(image)\n                pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                image_label.setPixmap(pixmap)\n                image_label.setAlignment(Qt.AlignCenter)\n                image_label.setMinimumSize(300, 300)\n\n            main_layout.addWidget(image_label)\n            snippet = \"\"\n        else:\n            # Fallback for non-image or failed image\n            text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n            text_label.setStyleSheet(\"font-weight: regular;\")\n            main_layout.addWidget(text_label)\n\n\n            # Add timestamp label\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            main_layout.addWidget(timestamp_label)\n\n            # Add transformation buttons (unchanged)\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                btn = QPushButton()\n                btn.setIcon(QIcon(icon_path))\n                btn.setIconSize(QSize(16, 16))\n                btn.setToolTip(tooltip)\n                btn.setFixedSize(32, 28)\n                btn.clicked.connect(lambda _, t=text: handler(t))\n\n                effect = QGraphicsOpacityEffect()\n                effect.setOpacity(0.0)\n                btn.setGraphicsEffect(effect)\n                btn.setEnabled(False)\n\n                fade_anim = QPropertyAnimation(effect, b\"opacity\")\n                fade_anim.setDuration(300)\n                fade_anim.setStartValue(0.0)\n                fade_anim.setEndValue(1.0)\n                fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n                btn.setStyleSheet(f\"\"\"\n                    QPushButton {{\n                        background-color: transparent;\n                        border-radius: 2px;\n                        padding: 4px;\n                        border: 1px solid green;\n                    }}\n                    QPushButton:hover {{\n                        background-color: #5a5a5a;\n                    }}\n                \"\"\")\n\n                btn._fade_anim = fade_anim\n\n                def animate_in():\n                    btn.setEnabled(True)\n                    fade_anim.setDirection(QPropertyAnimation.Forward)\n                    fade_anim.start()\n\n                def animate_out():\n                    fade_anim.setDirection(QPropertyAnimation.Backward)\n                    fade_anim.start()\n                    btn.setEnabled(False)\n\n                btn.animate_in = animate_in\n                btn.animate_out = animate_out\n\n                button_layout.addWidget(btn)\n                buttons.append((btn, effect))\n\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)\n            item_widget.setLayout(main_layout)\n            item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n            def enterEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_in()\n                QWidget.enterEvent(item_widget, event)\n\n            def leaveEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_out()\n                QWidget.leaveEvent(item_widget, event)\n\n            item_widget.enterEvent = enterEvent\n            item_widget.leaveEvent = leaveEvent\n\n            container = QWidget()\n            container_layout = QVBoxLayout(container)\n            container_layout.setContentsMargins(0, 0, 18, 18)\n            container_layout.addWidget(item_widget)\n\n            list_item = QListWidgetItem()\n            list_item.setSizeHint(container.sizeHint())\n            list_item.setData(Qt.UserRole, text)\n            self.list_widget.addItem(list_item)\n            self.list_widget.setItemWidget(list_item, container)",
    "type": "code",
    "timestamp": "2025-04-25 21:27:29"
  },
  {
    "text": "file:///home/guest/Downloads/eco-friendly-cat-care-options.jpg",
    "type": "text",
    "timestamp": "2025-04-25 21:25:55"
  },
  {
    "text": "file:///home/guest/Downloads/eco-friendly-cat-care-options.jpg",
    "type": "text",
    "timestamp": "2025-04-25 21:23:56"
  },
  {
    "text": "image_extensions = (\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\")\nis_image = any(text.lower().endswith(ext) for ext in image_extensions) and os.path.exists(text)\n\nif is_image:\n    print(f\"Trying to load image: {text}\")\n    image_label = QLabel()\n    image = QImage(text)\n\n    if image.isNull():\n        print(f\"Failed to load image: {text}\")\n        image_label.setText(\"Failed to load image.\")\n    else:\n        pixmap = QPixmap.fromImage(image)\n        pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n        image_label.setPixmap(pixmap)\n        image_label.setAlignment(Qt.AlignCenter)\n        image_label.setMinimumSize(300, 300)\n\n    main_layout.addWidget(image_label)\n    snippet = \"\"\nelse:\n    # Fallback for non-image or failed image\n    text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n    text_label.setStyleSheet(\"font-weight: regular;\")\n    main_layout.addWidget(text_label)\n",
    "type": "text",
    "timestamp": "2025-04-25 21:19:51"
  },
  {
    "text": "if content_type == \"image\" and os.path.exists(text):\n",
    "type": "text",
    "timestamp": "2025-04-25 21:14:42"
  },
  {
    "text": "\n    def update_list(self, items=None):\n        self.list_widget.clear()\n        items = items or self.history\n        print(\"History items:\", items)  # Debug the history\n\n        for item in items:\n            content_type = item.get(\"type\", \"text\")\n            text = item.get(\"text\", \"\")\n            timestamp = item.get(\"timestamp\") or \"Unknown time\"\n            print(f\"Item: type={content_type}, text={text}, timestamp={timestamp}\")\n\n            # Create the item widget and main layout\n            item_widget = QWidget()\n            main_layout = QVBoxLayout()\n            main_layout.setContentsMargins(12, 20, 12, 8)\n            main_layout.setSpacing(6)\n\n            # Prepare snippet for text display\n            snippet = text[:60]\n\n            # Check if content is an image\n            if content_type == \"image\" and os.path.exists(text):\n                print(f\"Loading image from: {text}\")\n                \n                image_label = QLabel()\n                image = QImage(text)\n                \n                if image.isNull():\n                    print(f\"Failed to load image: {text}\")\n                    image_label.setText(f\"Failed to load image: {text}\")\n                else:\n                    pixmap = QPixmap.fromImage(image)\n                    pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                    image_label.setPixmap(pixmap)\n                    image_label.setAlignment(Qt.AlignCenter)\n                    image_label.setMinimumSize(300, 300)\n                \n                main_layout.addWidget(image_label)\n                snippet = \"\"  # No text for images\n            else:\n                # Handle non-image items\n                image_extensions = (\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\")\n                if any(text.lower().endswith(ext) for ext in image_extensions):\n                    text_label = QLabel(\"Image (preview not available)\")\n                else:\n                    text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n                text_label.setStyleSheet(\"font-weight: regular;\")\n                main_layout.addWidget(text_label)\n\n            # Add timestamp label\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            main_layout.addWidget(timestamp_label)\n\n            # Add transformation buttons (unchanged)\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                btn = QPushButton()\n                btn.setIcon(QIcon(icon_path))\n                btn.setIconSize(QSize(16, 16))\n                btn.setToolTip(tooltip)\n                btn.setFixedSize(32, 28)\n                btn.clicked.connect(lambda _, t=text: handler(t))\n\n                effect = QGraphicsOpacityEffect()\n                effect.setOpacity(0.0)\n                btn.setGraphicsEffect(effect)\n                btn.setEnabled(False)\n\n                fade_anim = QPropertyAnimation(effect, b\"opacity\")\n                fade_anim.setDuration(300)\n                fade_anim.setStartValue(0.0)\n                fade_anim.setEndValue(1.0)\n                fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n                btn.setStyleSheet(f\"\"\"\n                    QPushButton {{\n                        background-color: transparent;\n                        border-radius: 2px;\n                        padding: 4px;\n                        border: 1px solid green;\n                    }}\n                    QPushButton:hover {{\n                        background-color: #5a5a5a;\n                    }}\n                \"\"\")\n\n                btn._fade_anim = fade_anim\n\n                def animate_in():\n                    btn.setEnabled(True)\n                    fade_anim.setDirection(QPropertyAnimation.Forward)\n                    fade_anim.start()\n\n                def animate_out():\n                    fade_anim.setDirection(QPropertyAnimation.Backward)\n                    fade_anim.start()\n                    btn.setEnabled(False)\n\n                btn.animate_in = animate_in\n                btn.animate_out = animate_out\n\n                button_layout.addWidget(btn)\n                buttons.append((btn, effect))\n\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)\n            item_widget.setLayout(main_layout)\n            item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n            def enterEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_in()\n                QWidget.enterEvent(item_widget, event)\n\n            def leaveEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_out()\n                QWidget.leaveEvent(item_widget, event)\n\n            item_widget.enterEvent = enterEvent\n            item_widget.leaveEvent = leaveEvent\n\n            container = QWidget()\n            container_layout = QVBoxLayout(container)\n            container_layout.setContentsMargins(0, 0, 18, 18)\n            container_layout.addWidget(item_widget)\n\n            list_item = QListWidgetItem()\n            list_item.setSizeHint(container.sizeHint())\n            list_item.setData(Qt.UserRole, text)\n            self.list_widget.addItem(list_item)\n            self.list_widget.setItemWidget(list_item, container)",
    "type": "code",
    "timestamp": "2025-04-25 19:33:51"
  },
  {
    "text": "\n   from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QHBoxLayout, QPushButton, QListWidgetItem\nfrom PyQt5.QtGui import QPixmap, QImage, QIcon, QClipboard\nfrom PyQt5.QtCore import Qt, QSize, QPropertyAnimation, QEasingCurve\nfrom PyQt5.QtWidgets import QGraphicsOpacityEffect\nimport os\nimport re\nfrom PyQt5.QtWidgets import QApplication",
    "type": "code",
    "timestamp": "2025-04-25 19:32:33"
  },
  {
    "text": " def update_list(self, items=None):\n        self.list_widget.clear()\n        items = items or self.history\n        print(\"History items:\", items)  # Debug the history\n\n        for item in items:\n            content_type = item.get(\"type\", \"text\")\n            text = item.get(\"text\", \"\")\n            timestamp = item.get(\"timestamp\") or \"Unknown time\"\n            print(f\"Item: type={content_type}, text={text}, timestamp={timestamp}\")\n\n            # Create the item widget and main layout\n            item_widget = QWidget()\n            main_layout = QVBoxLayout()\n            main_layout.setContentsMargins(12, 20, 12, 8)\n            main_layout.setSpacing(6)\n\n            # Prepare snippet for text display\n            snippet = text[:60]\n\n            # Check if content is an image\n            if content_type == \"image\" and os.path.exists(text):\n                print(f\"Loading image from: {text}\")\n                \n                image_label = QLabel()\n                image = QImage(text)\n                \n                if image.isNull():\n                    print(f\"Failed to load image: {text}\")\n                    image_label.setText(f\"Failed to load image: {text}\")\n                else:\n                    pixmap = QPixmap.fromImage(image)\n                    pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                    image_label.setPixmap(pixmap)\n                    image_label.setAlignment(Qt.AlignCenter)\n                    image_label.setMinimumSize(300, 300)\n                \n                main_layout.addWidget(image_label)\n                snippet = \"\"  # No text for images\n            else:\n                # Handle non-image items\n                image_extensions = (\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\")\n                if any(text.lower().endswith(ext) for ext in image_extensions):\n                    text_label = QLabel(\"Image (preview not available)\")\n                else:\n                    text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n                text_label.setStyleSheet(\"font-weight: regular;\")\n                main_layout.addWidget(text_label)\n\n            # Add timestamp label\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            main_layout.addWidget(timestamp_label)\n\n            # Add transformation buttons (unchanged)\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                btn = QPushButton()\n                btn.setIcon(QIcon(icon_path))\n                btn.setIconSize(QSize(16, 16))\n                btn.setToolTip(tooltip)\n                btn.setFixedSize(32, 28)\n                btn.clicked.connect(lambda _, t=text: handler(t))\n\n                effect = QGraphicsOpacityEffect()\n                effect.setOpacity(0.0)\n                btn.setGraphicsEffect(effect)\n                btn.setEnabled(False)\n\n                fade_anim = QPropertyAnimation(effect, b\"opacity\")\n                fade_anim.setDuration(300)\n                fade_anim.setStartValue(0.0)\n                fade_anim.setEndValue(1.0)\n                fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n                btn.setStyleSheet(f\"\"\"\n                    QPushButton {{\n                        background-color: transparent;\n                        border-radius: 2px;\n                        padding: 4px;\n                        border: 1px solid green;\n                    }}\n                    QPushButton:hover {{\n                        background-color: #5a5a5a;\n                    }}\n                \"\"\")\n\n                btn._fade_anim = fade_anim\n\n                def animate_in():\n                    btn.setEnabled(True)\n                    fade_anim.setDirection(QPropertyAnimation.Forward)\n                    fade_anim.start()\n\n                def animate_out():\n                    fade_anim.setDirection(QPropertyAnimation.Backward)\n                    fade_anim.start()\n                    btn.setEnabled(False)\n\n                btn.animate_in = animate_in\n                btn.animate_out = animate_out\n\n                button_layout.addWidget(btn)\n                buttons.append((btn, effect))\n\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)\n            item_widget.setLayout(main_layout)\n            item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n            def enterEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_in()\n                QWidget.enterEvent(item_widget, event)\n\n            def leaveEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_out()\n                QWidget.leaveEvent(item_widget, event)\n\n            item_widget.enterEvent = enterEvent\n            item_widget.leaveEvent = leaveEvent\n\n            container = QWidget()\n            container_layout = QVBoxLayout(container)\n            container_layout.setContentsMargins(0, 0, 18, 18)\n            container_layout.addWidget(item_widget)\n\n            list_item = QListWidgetItem()\n            list_item.setSizeHint(container.sizeHint())\n            list_item.setData(Qt.UserRole, text)\n            self.list_widget.addItem(list_item)\n            self.list_widget.setItemWidget(list_item, container)\n    ",
    "type": "code",
    "timestamp": "2025-04-25 18:55:20"
  },
  {
    "text": "\n   from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QHBoxLayout, QPushButton, QListWidgetItem\nfrom PyQt5.QtGui import QPixmap, QImage, QIcon, QClipboard\nfrom PyQt5.QtCore import Qt, QSize, QPropertyAnimation, QEasingCurve\nfrom PyQt5.QtWidgets import QGraphicsOpacityEffect\nimport os\nimport re\nfrom PyQt5.QtWidgets import QApplication",
    "type": "code",
    "timestamp": "2025-04-25 18:40:58"
  },
  {
    "text": "from PyQt5.QtWidgets import QWidget, QVBoxLayout, QLabel, QHBoxLayout, QPushButton, QListWidgetItem\nfrom PyQt5.QtGui import QPixmap, QImage, QIcon, QClipboard\nfrom PyQt5.QtCore import Qt, QSize, QPropertyAnimation, QEasingCurve\nfrom PyQt5.QtWidgets import QGraphicsOpacityEffect\nimport os\nimport re\nfrom PyQt5.QtWidgets import QApplication\n\ndef update_list(self, items=None):\n    self.list_widget.clear()\n    items = items or self.history\n    print(\"History items:\", items)  # Debug the history\n\n    # Access the clipboard to check for image data\n    clipboard = QApplication.clipboard()\n\n    for item in items:\n        content_type = item.get(\"type\", \"text\")\n        text = item.get(\"text\", \"\")\n        timestamp = item.get(\"timestamp\") or \"Unknown time\"\n        print(f\"Item: type={content_type}, text={text}, timestamp={timestamp}\")\n\n        # Create the item widget and main layout\n        item_widget = QWidget()\n        main_layout = QVBoxLayout()\n        main_layout.setContentsMargins(12, 20, 12, 8)\n        main_layout.setSpacing(6)\n\n        # Prepare snippet for text display\n        snippet = text[:60] if isinstance(text, str) else \"\"\n\n        # Check if content is an image\n        image_label = None\n        if content_type == \"image\":\n            print(f\"Processing image item: {text}\")\n            \n            image_label = QLabel()\n            image = None\n\n            # Case 1: Image from file path\n            if isinstance(text, str) and os.path.exists(text):\n                print(f\"Loading image from file: {text}\")\n                image = QImage(text)\n            \n            # Case 2: Image from clipboard (if no valid file path)\n            elif clipboard.mimeData().hasImage():\n                print(\"Loading image from clipboard\")\n                image = clipboard.image()\n            \n            if image and not image.isNull():\n                pixmap = QPixmap.fromImage(image)\n                pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                image_label.setPixmap(pixmap)\n                image_label.setAlignment(Qt.AlignCenter)\n                image_label.setMinimumSize(300, 300)\n                snippet = \"\"  # No text for images\n            else:\n                print(f\"Failed to load image: {text}\")\n                image_label.setText(f\"Failed to load image: {text}\")\n\n            main_layout.addWidget(image_label)\n        else:\n            # Handle non-image items\n            image_extensions = (\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\")\n            if isinstance(text, str) and any(text.lower().endswith(ext) for ext in image_extensions):\n                # Attempt to load as image if it's a file path\n                image_label = QLabel()\n                if os.path.exists(text):\n                    print(f\"Loading potential image file: {text}\")\n                    image = QImage(text)\n                    if not image.isNull():\n                        pixmap = QPixmap.fromImage(image)\n                        pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                        image_label.setPixmap(pixmap)\n                        image_label.setAlignment(Qt.AlignCenter)\n                        image_label.setMinimumSize(300, 300)\n                        snippet = \"\"\n                    else:\n                        image_label.setText(\"Image (preview not available)\")\n                else:\n                    image_label.setText(\"Image (preview not available)\")\n                main_layout.addWidget(image_label)\n            else:\n                # Display text content\n                text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n                text_label.setStyleSheet(\"font-weight: regular;\")\n                main_layout.addWidget(text_label)\n\n        # Add timestamp label\n        timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n        timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n        main_layout.addWidget(timestamp_label)\n\n        # Add transformation buttons (unchanged)\n        button_layout = QHBoxLayout()\n        button_layout.setSpacing(12)\n        button_layout.setAlignment(Qt.AlignLeft)\n        buttons = []\n\n        def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n            btn = QPushButton()\n            btn.setIcon(QIcon(icon_path))\n            btn.setIconSize(QSize(16, 16))\n            btn.setToolTip(tooltip)\n            btn.setFixedSize(32, 28)\n            btn.clicked.connect(lambda _, t=text: handler(t))\n\n            effect = QGraphicsOpacityEffect()\n            effect.setOpacity(0.0)\n            btn.setGraphicsEffect(effect)\n            btn.setEnabled(False)\n\n            fade_anim = QPropertyAnimation(effect, b\"opacity\")\n            fade_anim.setDuration(300)\n            fade_anim.setStartValue(0.0)\n            fade_anim.setEndValue(1.0)\n            fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n            btn.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: transparent;\n                    border-radius: 2px;\n                    padding: 4px;\n                    border: 1px solid green;\n                }}\n                QPushButton:hover {{\n                    background-color: #5a5a5a;\n                }}\n            \"\"\")\n\n            btn._fade_anim = fade_anim\n\n            def animate_in():\n                btn.setEnabled(True)\n                fade_anim.setDirection(QPropertyAnimation.Forward)\n                fade_anim.start()\n\n            def animate_out():\n                fade_anim.setDirection(QPropertyAnimation.Backward)\n                fade_anim.start()\n                btn.setEnabled(False)\n\n            btn.animate_in = animate_in\n            btn.animate_out = animate_out\n\n            button_layout.addWidget(btn)\n            buttons.append((btn, effect))\n\n        add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n        add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n        add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n        add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n        add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n        main_layout.addLayout(button_layout)\n        item_widget.setLayout(main_layout)\n        item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n        def enterEvent(event, btns=buttons):\n            for btn, _ in btns:\n                btn.animate_in()\n            QWidget.enterEvent(item_widget, event)\n\n        def leaveEvent(event, btns=buttons):\n            for btn, _ in btns:\n                btn.animate_out()\n            QWidget.leaveEvent(item_widget, event)\n\n        item_widget.enterEvent = enterEvent\n        item_widget.leaveEvent = leaveEvent\n\n        container = QWidget()\n        container_layout = QVBoxLayout(container)\n        container_layout.setContentsMargins(0, 0, 18, 18)\n        container_layout.addWidget(item_widget)\n\n        list_item = QListWidgetItem()\n        list_item.setSizeHint(container.sizeHint())\n        list_item.setData(Qt.UserRole, text)\n        self.list_widget.addItem(list_item)\n        self.list_widget.setItemWidget(list_item, container)",
    "type": "code",
    "timestamp": "2025-04-25 18:40:35"
  },
  {
    "text": " def update_list(self, items=None):\n        self.list_widget.clear()\n        items = items or self.history\n        print(\"History items:\", items)  # Debug the history\n\n        for item in items:\n            content_type = item.get(\"type\", \"text\")\n            text = item.get(\"text\", \"\")\n            timestamp = item.get(\"timestamp\") or \"Unknown time\"\n            print(f\"Item: type={content_type}, text={text}, timestamp={timestamp}\")\n\n            # Create the item widget and main layout\n            item_widget = QWidget()\n            main_layout = QVBoxLayout()\n            main_layout.setContentsMargins(12, 20, 12, 8)\n            main_layout.setSpacing(6)\n\n            # Prepare snippet for text display\n            snippet = text[:60]\n\n            # Check if content is an image\n            if content_type == \"image\" and os.path.exists(text):\n                print(f\"Loading image from: {text}\")\n                \n                image_label = QLabel()\n                image = QImage(text)\n                \n                if image.isNull():\n                    print(f\"Failed to load image: {text}\")\n                    image_label.setText(f\"Failed to load image: {text}\")\n                else:\n                    pixmap = QPixmap.fromImage(image)\n                    pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                    image_label.setPixmap(pixmap)\n                    image_label.setAlignment(Qt.AlignCenter)\n                    image_label.setMinimumSize(300, 300)\n                \n                main_layout.addWidget(image_label)\n                snippet = \"\"  # No text for images\n            else:\n                # Handle non-image items\n                image_extensions = (\".png\", \".jpg\", \".jpeg\", \".bmp\", \".gif\")\n                if any(text.lower().endswith(ext) for ext in image_extensions):\n                    text_label = QLabel(\"Image (preview not available)\")\n                else:\n                    text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n                text_label.setStyleSheet(\"font-weight: regular;\")\n                main_layout.addWidget(text_label)\n\n            # Add timestamp label\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            main_layout.addWidget(timestamp_label)\n\n            # Add transformation buttons (unchanged)\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                btn = QPushButton()\n                btn.setIcon(QIcon(icon_path))\n                btn.setIconSize(QSize(16, 16))\n                btn.setToolTip(tooltip)\n                btn.setFixedSize(32, 28)\n                btn.clicked.connect(lambda _, t=text: handler(t))\n\n                effect = QGraphicsOpacityEffect()\n                effect.setOpacity(0.0)\n                btn.setGraphicsEffect(effect)\n                btn.setEnabled(False)\n\n                fade_anim = QPropertyAnimation(effect, b\"opacity\")\n                fade_anim.setDuration(300)\n                fade_anim.setStartValue(0.0)\n                fade_anim.setEndValue(1.0)\n                fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n                btn.setStyleSheet(f\"\"\"\n                    QPushButton {{\n                        background-color: transparent;\n                        border-radius: 2px;\n                        padding: 4px;\n                        border: 1px solid green;\n                    }}\n                    QPushButton:hover {{\n                        background-color: #5a5a5a;\n                    }}\n                \"\"\")\n\n                btn._fade_anim = fade_anim\n\n                def animate_in():\n                    btn.setEnabled(True)\n                    fade_anim.setDirection(QPropertyAnimation.Forward)\n                    fade_anim.start()\n\n                def animate_out():\n                    fade_anim.setDirection(QPropertyAnimation.Backward)\n                    fade_anim.start()\n                    btn.setEnabled(False)\n\n                btn.animate_in = animate_in\n                btn.animate_out = animate_out\n\n                button_layout.addWidget(btn)\n                buttons.append((btn, effect))\n\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)\n            item_widget.setLayout(main_layout)\n            item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n            def enterEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_in()\n                QWidget.enterEvent(item_widget, event)\n\n            def leaveEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_out()\n                QWidget.leaveEvent(item_widget, event)\n\n            item_widget.enterEvent = enterEvent\n            item_widget.leaveEvent = leaveEvent\n\n            container = QWidget()\n            container_layout = QVBoxLayout(container)\n            container_layout.setContentsMargins(0, 0, 18, 18)\n            container_layout.addWidget(item_widget)\n\n            list_item = QListWidgetItem()\n            list_item.setSizeHint(container.sizeHint())\n            list_item.setData(Qt.UserRole, text)\n            self.list_widget.addItem(list_item)\n            self.list_widget.setItemWidget(list_item, container)\n    ",
    "type": "code",
    "timestamp": "2025-04-25 18:37:20"
  },
  {
    "text": "\nis this right if content_type == \"image\" and os.path.exists(text):\n            print(f\"Loading image from: {text}\")\n            \n            image_label = QLabel()\n            image = QImage(text)\n            \n            if image \\\n\n.isNull():",
    "type": "text",
    "timestamp": "2025-04-25 18:35:43"
  },
  {
    "text": "def update_list(self, items=None):\n    self.list_widget.clear()\n    items = items or self.history\n\n    for item in items:\n        content_type = item.get(\"type\", \"text\")\n        text = item.get(\"text\", \"\")\n        timestamp = item.get(\"timestamp\") or \"Unknown time\"\n\n        item_widget = QWidget()\n        main_layout = QVBoxLayout()\n        main_layout.setContentsMargins(12, 20, 12, 8)\n        main_layout.setSpacing(6)\n\n        # Check if content is an image\n        if content_type == \"image\":\n            # Remove \"file://\" prefix if present\n            image_path = text.replace(\"file://\", \"\")\n            \n            if os.path.exists(image_path):\n                try:\n                    # Load the image\n                    pixmap = QPixmap(image_path)\n                    if not pixmap.isNull():\n                        # Create a label for the image\n                        image_label = QLabel()\n                        # Scale the image while maintaining aspect ratio\n                        scaled_pixmap = pixmap.scaledToWidth(300, Qt.SmoothTransformation)\n                        image_label.setPixmap(scaled_pixmap)\n                        image_label.setAlignment(Qt.AlignCenter)\n                        main_layout.addWidget(image_label)\n                    else:\n                        # Show error if image couldn't be loaded\n                        error_label = QLabel(\"Failed to load image\")\n                        error_label.setStyleSheet(\"color: red;\")\n                        main_layout.addWidget(error_label)\n                except Exception as e:\n                    print(f\"Error loading image: {e}\")\n                    error_label = QLabel(\"Error loading image\")\n                    error_label.setStyleSheet(\"color: red;\")\n                    main_layout.addWidget(error_label)\n            else:\n                # Show error if file doesn't exist\n                error_label = QLabel(\"Image file not found\")\n                error_label.setStyleSheet(\"color: red;\")\n                main_layout.addWidget(error_label)\n        else:\n            # Handle text items\n            snippet = text[:60]\n            text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n            text_label.setStyleSheet(\"font-weight: regular;\")\n            main_layout.addWidget(text_label)\n\n        # Add timestamp label\n        timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n        timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n        main_layout.addWidget(timestamp_label)\n\n        # Add transformation buttons for text\n        button_layout = QHBoxLayout()\n        button_layout.setSpacing(12)\n        button_layout.setAlignment(Qt.AlignLeft)\n        buttons = []\n\n        def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n            btn = QPushButton()\n            btn.setIcon(QIcon(icon_path))\n            btn.setIconSize(QSize(16, 16))\n            btn.setToolTip(tooltip)\n            btn.setFixedSize(32, 28)\n            btn.clicked.connect(lambda _, t=text: handler(t))\n\n            effect = QGraphicsOpacityEffect()\n            effect.setOpacity(0.0)\n            btn.setGraphicsEffect(effect)\n            btn.setEnabled(False)\n\n            fade_anim = QPropertyAnimation(effect, b\"opacity\")\n            fade_anim.setDuration(300)\n            fade_anim.setStartValue(0.0)\n            fade_anim.setEndValue(1.0)\n            fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n            btn.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: transparent;\n                    border-radius: 2px;\n                    padding: 4px;\n                    border: 1px solid green;\n                }}\n                QPushButton:hover {{\n                    background-color: #5a5a5a;\n                }}\n            \"\"\")\n\n            btn._fade_anim = fade_anim\n\n            def animate_in():\n                btn.setEnabled(True)\n                fade_anim.setDirection(QPropertyAnimation.Forward)\n                fade_anim.start()\n\n            def animate_out():\n                fade_anim.setDirection(QPropertyAnimation.Backward)\n                fade_anim.start()\n                btn.setEnabled(False)\n\n            btn.animate_in = animate_in\n            btn.animate_out = animate_out\n\n            button_layout.addWidget(btn)\n            buttons.append((btn, effect))\n\n        # Add buttons\n        add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n        add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n        add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n        add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n        add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n        main_layout.addLayout(button_layout)\n        item_widget.setLayout(main_layout)\n        item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n        # Event handlers\n        def enterEvent(event):\n            for btn, _ in buttons:\n                btn.animate_in()\n            QWidget.enterEvent(item_widget, event)\n\n        def leaveEvent(event):\n            for btn, _ in buttons:\n                btn.animate_out()\n            QWidget.leaveEvent(item_widget, event)\n\n        item_widget.enterEvent = enterEvent\n        item_widget.leaveEvent = leaveEvent\n\n        # Create container for the list item\n        container = QWidget()\n        container_layout = QVBoxLayout(container)\n        container_layout.setContentsMargins(0, 0, 18, 18)\n        container_layout.addWidget(item_widget)\n\n        list_item = QListWidgetItem()\n        list_item.setSizeHint(container.sizeHint())\n        list_item.setData(Qt.UserRole, text)\n        self.list_widget.addItem(list_item)\n        self.list_widget.setItemWidget(list_item, container)",
    "type": "code",
    "timestamp": "2025-04-25 18:22:00"
  },
  {
    "text": "def update_list(self, items=None):\n        self.list_widget.clear()\n        items = items or self.history\n\n        for item in items:\n            content_type = item.get(\"type\", \"text\")\n            text = item.get(\"text\", \"\")\n            timestamp = item.get(\"timestamp\") or \"Unknown time\"\n\n            item_widget = QWidget()\n            main_layout = QVBoxLayout()\n            main_layout.setContentsMargins(12, 20, 12, 8)\n            main_layout.setSpacing(6)\n\n            # Check if content is an image\n            if content_type == \"image\":\n                # Remove \"file://\" prefix if present\n                image_path = text.replace(\"file://\", \"\")\n                \n                if os.path.exists(image_path):\n                    try:\n                        # Load the image\n                        pixmap = QPixmap(image_path)\n                        if not pixmap.isNull():\n                            # Create a label for the image\n                            image_label = QLabel()\n                            # Scale the image while maintaining aspect ratio\n                            scaled_pixmap = pixmap.scaledToWidth(300, Qt.SmoothTransformation)\n                            image_label.setPixmap(scaled_pixmap)\n                            image_label.setAlignment(Qt.AlignCenter)\n                            main_layout.addWidget(image_label)\n                        else:\n                            # Show error if image couldn't be loaded\n                            error_label = QLabel(\"Failed to load image\")\n                            error_label.setStyleSheet(\"color: red;\")\n                            main_layout.addWidget(error_label)\n                    except Exception as e:\n                        print(f\"Error loading image: {e}\")\n                        error_label = QLabel(\"Error loading image\")\n                        error_label.setStyleSheet(\"color: red;\")\n                        main_layout.addWidget(error_label)\n                else:\n                    # Show error if file doesn't exist\n                    error_label = QLabel(\"Image file not found\")\n                    error_label.setStyleSheet(\"color: red;\")\n                    main_layout.addWidget(error_label)\n            else:\n                # Handle text items (your existing code)\n                snippet = text[:60]\n                text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n                text_label.setStyleSheet(\"font-weight: regular;\")\n                main_layout.addWidget(text_label)\n\n            # Rest of your code (timestamp, buttons, etc.)\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            main_layout.addWidget(timestamp_label)\n\n            # Add transformation buttons for text\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                # ... (keep your existing button creation code) ...\n                pass\n\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)\n\n            # ... (keep your existing button creation code) ...\n\n            item_widget.setLayout(main_layout)\n            item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n            # ... (rest of your widget setup code) ...\n            def enterEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_in()\n                    QWidget.enterEvent(item_widget, event)\n\n                def leaveEvent(event, btns=buttons):\n                    for btn, _ in btns:\n                        btn.animate_out()\n                    QWidget.leaveEvent(item_widget, event)\n\n                item_widget.enterEvent = enterEvent\n                item_widget.leaveEvent = leaveEvent\n\n                container = QWidget()\n                container_layout = QVBoxLayout(container)\n                container_layout.setContentsMargins(0, 0, 18, 18)\n                container_layout.addWidget(item_widget)\n\n                list_item = QListWidgetItem()\n                list_item.setSizeHint(container.sizeHint())\n                list_item.setData(Qt.UserRole, text)\n                self.list_widget.addItem(list_item)\n                self.list_widget.setItemWidget(list_item, container)\n    ",
    "type": "code",
    "timestamp": "2025-04-25 18:20:14"
  },
  {
    "text": "file:///home/guest/Downloads/eco-friendly-cat-care-options.jpg",
    "type": "text",
    "timestamp": "2025-04-25 18:18:59"
  },
  {
    "text": "file:///home/guest/Downloads/eco-friendly-cat-care-options.jpg",
    "type": "text",
    "timestamp": "2025-04-25 18:18:34"
  },
  {
    "text": "def enterEvent(event, btns=buttons):\n            for btn, _ in btns:\n                btn.animate_in()\n            QWidget.enterEvent(item_widget, event)\n\n        def leaveEvent(event, btns=buttons):\n            for btn, _ in btns:\n                btn.animate_out()\n            QWidget.leaveEvent(item_widget, event)\n\n        item_widget.enterEvent = enterEvent\n        item_widget.leaveEvent = leaveEvent\n\n        container = QWidget()\n        container_layout = QVBoxLayout(container)\n        container_layout.setContentsMargins(0, 0, 18, 18)\n        container_layout.addWidget(item_widget)\n\n        list_item = QListWidgetItem()\n        list_item.setSizeHint(container.sizeHint())\n        list_item.setData(Qt.UserRole, text)\n        self.list_widget.addItem(list_item)\n        self.list_widget.setItemWidget(list_item, container)",
    "type": "code",
    "timestamp": "2025-04-25 18:17:48"
  },
  {
    "text": "# Add transformation buttons for text\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                # ... (keep your existing button creation code) ...\n                pass\n\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)",
    "type": "code",
    "timestamp": "2025-04-25 18:17:16"
  },
  {
    "text": "def update_list(self, items=None):\n    self.list_widget.clear()\n    items = items or self.history\n\n    for item in items:\n        content_type = item.get(\"type\", \"text\")\n        text = item.get(\"text\", \"\")\n        timestamp = item.get(\"timestamp\") or \"Unknown time\"\n\n        item_widget = QWidget()\n        main_layout = QVBoxLayout()\n        main_layout.setContentsMargins(12, 20, 12, 8)\n        main_layout.setSpacing(6)\n\n        # Check if content is an image\n        if content_type == \"image\":\n            # Remove \"file://\" prefix if present\n            image_path = text.replace(\"file://\", \"\")\n            \n            if os.path.exists(image_path):\n                try:\n                    # Load the image\n                    pixmap = QPixmap(image_path)\n                    if not pixmap.isNull():\n                        # Create a label for the image\n                        image_label = QLabel()\n                        # Scale the image while maintaining aspect ratio\n                        scaled_pixmap = pixmap.scaledToWidth(300, Qt.SmoothTransformation)\n                        image_label.setPixmap(scaled_pixmap)\n                        image_label.setAlignment(Qt.AlignCenter)\n                        main_layout.addWidget(image_label)\n                    else:\n                        # Show error if image couldn't be loaded\n                        error_label = QLabel(\"Failed to load image\")\n                        error_label.setStyleSheet(\"color: red;\")\n                        main_layout.addWidget(error_label)\n                except Exception as e:\n                    print(f\"Error loading image: {e}\")\n                    error_label = QLabel(\"Error loading image\")\n                    error_label.setStyleSheet(\"color: red;\")\n                    main_layout.addWidget(error_label)\n            else:\n                # Show error if file doesn't exist\n                error_label = QLabel(\"Image file not found\")\n                error_label.setStyleSheet(\"color: red;\")\n                main_layout.addWidget(error_label)\n        else:\n            # Handle text items (your existing code)\n            snippet = text[:60]\n            text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n            text_label.setStyleSheet(\"font-weight: regular;\")\n            main_layout.addWidget(text_label)\n\n        # Rest of your code (timestamp, buttons, etc.)\n        timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n        timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n        main_layout.addWidget(timestamp_label)\n\n        # ... (keep your existing button creation code) ...\n\n        item_widget.setLayout(main_layout)\n        item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n        # ... (rest of your widget setup code) ...",
    "type": "code",
    "timestamp": "2025-04-25 18:15:26"
  },
  {
    "text": "file:///home/guest/Downloads/eco-friendly-cat-care-options.jpg",
    "type": "text",
    "timestamp": "2025-04-25 18:13:15"
  },
  {
    "text": "file:///home/guest/Downloads/eco-friendly-cat-care-options.jpg",
    "type": "text",
    "timestamp": "2025-04-25 18:13:02"
  },
  {
    "text": "file:///home/guest/Downloads/check-list.png",
    "type": "text",
    "timestamp": "2025-04-25 18:11:23"
  },
  {
    "text": "def update_list(self, items=None):\n    self.list_widget.clear()\n    items = items or self.history\n\n    for item in items:\n        content_type = item.get(\"type\", \"text\")\n        text = item.get(\"text\", \"\")\n        timestamp = item.get(\"timestamp\") or \"Unknown time\"\n\n        # Create the item widget and main layout\n        item_widget = QWidget()\n        main_layout = QVBoxLayout()\n        main_layout.setContentsMargins(12, 20, 12, 8)\n        main_layout.setSpacing(6)\n\n        # Check if content is an image\n        if content_type == \"image\":\n            # Create a horizontal layout for image items\n            image_layout = QHBoxLayout()\n            \n            # Load and display the image\n            image_label = QLabel()\n            if os.path.exists(text):\n                pixmap = QPixmap(text)\n                if not pixmap.isNull():\n                    # Scale the image to a reasonable size\n                    pixmap = pixmap.scaled(200, 200, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                    image_label.setPixmap(pixmap)\n                    image_label.setAlignment(Qt.AlignLeft)\n                else:\n                    image_label.setText(\"Failed to load image\")\n            else:\n                image_label.setText(\"Image file not found\")\n            \n            # Add the image to the left side\n            image_layout.addWidget(image_label, 0, Qt.AlignLeft)\n            \n            # Add timestamp below the image\n            timestamp_layout = QVBoxLayout()\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            timestamp_layout.addWidget(timestamp_label)\n            \n            # Add transformation buttons (only relevant ones for images)\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                # ... (keep your existing button creation code) ...\n                pass\n\n            # For images, you might want different buttons than for text\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            \n            timestamp_layout.addLayout(button_layout)\n            image_layout.addLayout(timestamp_layout, 1)\n            main_layout.addLayout(image_layout)\n        else:\n            # Handle text items\n            snippet = text[:60]\n            text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n            text_label.setStyleSheet(\"font-weight: regular;\")\n            main_layout.addWidget(text_label)\n\n            # Add timestamp label\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            main_layout.addWidget(timestamp_label)\n\n            # Add transformation buttons for text\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                # ... (keep your existing button creation code) ...\n                pass\n\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)\n\n        item_widget.setLayout(main_layout)\n        item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n        def enterEvent(event, btns=buttons):\n            for btn, _ in btns:\n                btn.animate_in()\n            QWidget.enterEvent(item_widget, event)\n\n        def leaveEvent(event, btns=buttons):\n            for btn, _ in btns:\n                btn.animate_out()\n            QWidget.leaveEvent(item_widget, event)\n\n        item_widget.enterEvent = enterEvent\n        item_widget.leaveEvent = leaveEvent\n\n        container = QWidget()\n        container_layout = QVBoxLayout(container)\n        container_layout.setContentsMargins(0, 0, 18, 18)\n        container_layout.addWidget(item_widget)\n\n        list_item = QListWidgetItem()\n        list_item.setSizeHint(container.sizeHint())\n        list_item.setData(Qt.UserRole, text)\n        self.list_widget.addItem(list_item)\n        self.list_widget.setItemWidget(list_item, container)",
    "type": "code",
    "timestamp": "2025-04-25 18:09:18"
  },
  {
    "text": "i am creating a smart clipboard and i want this program to display copied image but it is showing file path of an image\n\n",
    "type": "text",
    "timestamp": "2025-04-25 18:07:57"
  },
  {
    "text": " def update_list(self, items=None):\n        self.list_widget.clear()\n        items = items or self.history\n\n        for item in items:\n            content_type = item.get(\"type\", \"text\")\n            text = item.get(\"text\", \"\")\n            timestamp = item.get(\"timestamp\") or \"Unknown time\"\n\n            # \u2b07\ufe0f Create the item widget and main layout FIRST\n            item_widget = QWidget()\n            main_layout = QVBoxLayout()\n            main_layout.setContentsMargins(12, 20, 12, 8)\n            main_layout.setSpacing(6)\n\n            # Prepare snippet for text display\n            snippet = text[:60]\n\n            # Check if content is an image\n            if content_type == \"image\" and os.path.exists(text):\n                print(f\"Loading image from: {text}\")  # Debugging line\n\n                image_label = QLabel()\n                pixmap = QPixmap(text)\n                \n                # Check if the image was successfully loaded\n                if pixmap.isNull():\n                    print(f\"Failed to load image from: {text}\")\n                    image_label.setText(\"Failed to load image\")  # Show an error text if image fails to load\n                else:\n                    pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                    image_label.setPixmap(pixmap)\n                \n                main_layout.addWidget(image_label)\n                snippet = \"\"  # We don't show text for images\n            else:\n                text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n                text_label.setStyleSheet(\"font-weight: regular;\")\n                main_layout.addWidget(text_label)\n\n            # \u2b07\ufe0f Add timestamp label\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            main_layout.addWidget(timestamp_label)\n\n            # \u2b07\ufe0f Add transformation buttons\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                btn = QPushButton()\n                btn.setIcon(QIcon(icon_path))\n                btn.setIconSize(QSize(16, 16))\n                btn.setToolTip(tooltip)\n                btn.setFixedSize(32, 28)\n                btn.clicked.connect(lambda _, t=text: handler(t))\n\n                effect = QGraphicsOpacityEffect()\n                effect.setOpacity(0.0)\n                btn.setGraphicsEffect(effect)\n                btn.setEnabled(False)\n\n                fade_anim = QPropertyAnimation(effect, b\"opacity\")\n                fade_anim.setDuration(300)\n                fade_anim.setStartValue(0.0)\n                fade_anim.setEndValue(1.0)\n                fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n                btn.setStyleSheet(f\"\"\"\n                    QPushButton {{\n                        background-color: transparent;\n                        border-radius: 2px;\n                        padding: 4px;\n                        border: 1px solid green;\n                    }}\n                    QPushButton:hover {{\n                        background-color: #5a5a5a;\n                    }}\n                \"\"\")\n\n                btn._fade_anim = fade_anim\n\n                def animate_in():\n                    btn.setEnabled(True)\n                    fade_anim.setDirection(QPropertyAnimation.Forward)\n                    fade_anim.start()\n\n                def animate_out():\n                    fade_anim.setDirection(QPropertyAnimation.Backward)\n                    fade_anim.start()\n                    btn.setEnabled(False)\n\n                btn.animate_in = animate_in\n                btn.animate_out = animate_out\n\n                button_layout.addWidget(btn)\n                buttons.append((btn, effect))\n\n            # Add buttons after defining the function\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)\n            item_widget.setLayout(main_layout)\n            item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n            def enterEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_in()\n                QWidget.enterEvent(item_widget, event)\n\n            def leaveEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_out()\n                QWidget.leaveEvent(item_widget, event)\n\n            item_widget.enterEvent = enterEvent\n            item_widget.leaveEvent = leaveEvent\n\n            container = QWidget()\n            container_layout = QVBoxLayout(container)\n            container_layout.setContentsMargins(0, 0, 18, 18)\n            container_layout.addWidget(item_widget)\n\n            list_item = QListWidgetItem()\n            list_item.setSizeHint(container.sizeHint())\n            list_item.setData(Qt.UserRole, text)\n            self.list_widget.addItem(list_item)\n            self.list_widget.setItemWidget(list_item, container)\n",
    "type": "code",
    "timestamp": "2025-04-25 18:07:41"
  },
  {
    "text": "def update_list(self, items=None):\n        self.list_widget.clear()\n        items = items or self.history\n\n        for item in items:\n            content_type = item.get(\"type\", \"text\")\n            text = item.get(\"text\", \"\")\n            timestamp = item.get(\"timestamp\") or \"Unknown time\"\n\n            # \u2b07\ufe0f Create the item widget and main layout FIRST\n            item_widget = QWidget()\n            main_layout = QVBoxLayout()\n            main_layout.setContentsMargins(12, 20, 12, 8)\n            main_layout.setSpacing(6)\n\n            # Prepare snippet for text display\n            snippet = text[:60]\n\n            # Check if content is an image\n            if content_type == \"image\" and os.path.exists(text):\n                print(f\"Loading image from: {text}\")  # Debugging line\n\n                image_label = QLabel()\n                pixmap = QPixmap(text)\n                \n                # Check if the image was successfully loaded\n                if pixmap.isNull():\n                    print(f\"Failed to load image from: {text}\")\n                    image_label.setText(\"Failed to load image\")  # Show an error text if image fails to load\n                else:\n                    pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                    image_label.setPixmap(pixmap)\n                \n                main_layout.addWidget(image_label)\n                snippet = \"\"  # We don't show text for images\n            else:\n                text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n                text_label.setStyleSheet(\"font-weight: regular;\")\n                main_layout.addWidget(text_label)\n\n            # \u2b07\ufe0f Add timestamp label\n            timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n            timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n            main_layout.addWidget(timestamp_label)\n\n            # \u2b07\ufe0f Add transformation buttons\n            button_layout = QHBoxLayout()\n            button_layout.setSpacing(12)\n            button_layout.setAlignment(Qt.AlignLeft)\n            buttons = []\n\n            def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n                btn = QPushButton()\n                btn.setIcon(QIcon(icon_path))\n                btn.setIconSize(QSize(16, 16))\n                btn.setToolTip(tooltip)\n                btn.setFixedSize(32, 28)\n                btn.clicked.connect(lambda _, t=text: handler(t))\n\n                effect = QGraphicsOpacityEffect()\n                effect.setOpacity(0.0)\n                btn.setGraphicsEffect(effect)\n                btn.setEnabled(False)\n\n                fade_anim = QPropertyAnimation(effect, b\"opacity\")\n                fade_anim.setDuration(300)\n                fade_anim.setStartValue(0.0)\n                fade_anim.setEndValue(1.0)\n                fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n                btn.setStyleSheet(f\"\"\"\n                    QPushButton {{\n                        background-color: transparent;\n                        border-radius: 2px;\n                        padding: 4px;\n                        border: 1px solid green;\n                    }}\n                    QPushButton:hover {{\n                        background-color: #5a5a5a;\n                    }}\n                \"\"\")\n\n                btn._fade_anim = fade_anim\n\n                def animate_in():\n                    btn.setEnabled(True)\n                    fade_anim.setDirection(QPropertyAnimation.Forward)\n                    fade_anim.start()\n\n                def animate_out():\n                    fade_anim.setDirection(QPropertyAnimation.Backward)\n                    fade_anim.start()\n                    btn.setEnabled(False)\n\n                btn.animate_in = animate_in\n                btn.animate_out = animate_out\n\n                button_layout.addWidget(btn)\n                buttons.append((btn, effect))\n\n            # Add buttons after defining the function\n            add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n            add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n            add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n            add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n            add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n            main_layout.addLayout(button_layout)\n            item_widget.setLayout(main_layout)\n            item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n            def enterEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_in()\n                QWidget.enterEvent(item_widget, event)\n\n            def leaveEvent(event, btns=buttons):\n                for btn, _ in btns:\n                    btn.animate_out()\n                QWidget.leaveEvent(item_widget, event)\n\n            item_widget.enterEvent = enterEvent\n            item_widget.leaveEvent = leaveEvent\n\n            container = QWidget()\n            container_layout = QVBoxLayout(container)\n            container_layout.setContentsMargins(0, 0, 18, 18)\n            container_layout.addWidget(item_widget)\n\n            list_item = QListWidgetItem()\n            list_item.setSizeHint(container.sizeHint())\n            list_item.setData(Qt.UserRole, text)\n            self.list_widget.addItem(list_item)\n            self.list_widget.setItemWidget(list_item, container)\n",
    "type": "code",
    "timestamp": "2025-04-25 18:06:52"
  },
  {
    "text": "import re from PyQt5.QtWidgets import ( QWidget, QVBoxLayout, QLineEdit, QListWidget, QListWidgetItem, QInputDialog, QMenu, QDialog, QLabel # \ud83d\udc48 add QDialog here )\n\nfrom PyQt5.QtCore import Qt from transform_preview import TransformPreviewDialog from preview_transform_dialog import PreviewTransformDialog from PyQt5.QtCore import Qt from PyQt5.QtWidgets import QPushButton, QHBoxLayout\n\nfrom PyQt5.QtWidgets import QPushButton, QHBoxLayout from PyQt5.QtGui import QIcon from PyQt5.QtCore import QSize from PyQt5.QtWidgets import QGraphicsOpacityEffect from PyQt5.QtCore import QPropertyAnimation, QEasingCurve import os from PyQt5.QtGui import QPixmap\n\nclass SearchWindow(QWidget): def init(self, history, on_item_selected): super().init() self.setWindowTitle(\"KlipFusion Search Clipboard History\") # self.setGeometry(500, 300, 500, 400) self.resize(600, 600) # width, height\n\n    self.history = history\n    self.on_item_selected = on_item_selected\n\n    layout = QVBoxLayout()\n\n    self.search_box = QLineEdit()\n    self.search_box.setPlaceholderText(\"Search...\")\n    self.search_box.textChanged.connect(self.filter_history)\n\n    self.list_widget = QListWidget()\n    self.list_widget.itemClicked.connect(self.item_clicked)\n    self.list_widget.setContextMenuPolicy(Qt.CustomContextMenu)\n    self.list_widget.customContextMenuRequested.connect(self.show_context_menu)\n\n    layout.addWidget(self.search_box)\n    layout.addWidget(self.list_widget)\n    self.setLayout(layout)\n\n    self.update_list()\n\n    self.setStyleSheet(\"\"\"\n        QWidget {\n            background-color: #1e1e1e;\n            color: #ffffff;\n            font-family: 'Segoe UI', 'Ubuntu', sans-serif;\n            font-size: 14px;\n        }\n\n        QLineEdit {\n            padding: 8px;\n            border: 1px solid #444;\n            border-radius: 6px;\n            background-color: #2e2e2e;\n            color: white;\n        }\n\n        QListWidget {\n            background-color: #2a2a2a;\n            border: 1px solid #444;\n            border-radius: 6px;\n        }\n\n        QListWidget::item {\n            padding: 2px;\n        }\n\n        QListWidget::item:selected {\n            background-color: #3e8e41;\n            color: white;\n        }\n        QPushButton {\n            background-color: #3a3a3a;\n            color: white;\n            font-weight: bold;\n            border: none;\n            border-radius: 1px;\n            padding: 4px;\n        }\n\n        QPushButton:hover {\n            background-color: #5a5a5a;\n        }\n\n        QPushButton:pressed {\n            background-color: #2e7031;\n        }\n        QScrollBar:vertical {\n            border: none;\n            background: #2a2a2a;\n            width: 10px;\n            margin: 4px 0 4px 0;\n            border-radius: 5px;\n        }\n\n        QScrollBar::handle:vertical {\n            background: #5a5a5a;\n            min-height: 30px;\n            border-radius: 5px;\n        }\n\n        QScrollBar::handle:vertical:hover {\n            background: #777;\n        }\n\n        QScrollBar::handle:vertical:pressed {\n            background: #888;\n        }\n\n        QScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {\n            height: 0;\n            background: none;\n            border: none;\n        }\n\n        QScrollBar::add-page:vertical, QScrollBar::sub-page:vertical {\n            background: none;\n        }\n\n        QScrollBar:horizontal {\n            border: none;\n            background: #2a2a2a;\n            height: 10px;\n            margin: 0 4px 0 4px;\n            border-radius: 5px;\n        }\n\n        QScrollBar::handle:horizontal {\n            background: #5a5a5a;\n            min-width: 30px;\n            border-radius: 5px;\n        }\n\n        QScrollBar::handle:horizontal:hover {\n            background: #777;\n        }\n\n        QScrollBar::handle:horizontal:pressed {\n            background: #888;\n        }\n\n        QScrollBar::add-line:horizontal, QScrollBar::sub-line:horizontal {\n            width: 0;\n            background: none;\n            border: none;\n        }\n\n        QScrollBar::add-page:horizontal, QScrollBar::sub-page:horizontal {\n            background: none;\n        }\n\n\n    \"\"\")\n\n\ndef handle_transform(self, transformed):\n    dialog = TransformPreviewDialog(\"\", transformed, self)\n    if dialog.exec_() == QDialog.Accepted:\n        final = dialog.get_transformed_text()\n        if self.on_item_selected:\n            self.on_item_selected(final)\n        self.close()\n\ndef handle_edit(self, original):\n    edited, ok = QInputDialog.getMultiLineText(self, \"Edit Text\", \"Modify the text:\", original)\n    if ok and edited.strip():\n        if self.on_item_selected:\n            self.on_item_selected(edited.strip())\n        self.close()\n\n\ndef update_list(self, items=None):\n    self.list_widget.clear()\n    items = items or self.history\n\n    for item in items:\n        content_type = item.get(\"type\", \"text\")\n        text = item.get(\"text\", \"\")\n        timestamp = item.get(\"timestamp\") or \"Unknown time\"\n\n        # \u2b07\ufe0f Create the item widget and main layout FIRST\n        item_widget = QWidget()\n        main_layout = QVBoxLayout()\n        main_layout.setContentsMargins(12, 20, 12, 8)\n        main_layout.setSpacing(6)\n\n        # Prepare snippet for text display\n        snippet = text[:60]\n\n        # Check if content is an image\n        if content_type == \"image\" and os.path.exists(text):\n            print(f\"Loading image from: {text}\")  # Debugging line\n\n            image_label = QLabel()\n            pixmap = QPixmap(text)\n            \n            # Check if the image was successfully loaded\n            if pixmap.isNull():\n                print(f\"Failed to load image from: {text}\")\n                image_label.setText(\"Failed to load image\")  # Show an error text if image fails to load\n            else:\n                pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                image_label.setPixmap(pixmap)\n            \n            main_layout.addWidget(image_label)\n            snippet = \"\"  # We don't show text for images\n        else:\n            text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n            text_label.setStyleSheet(\"font-weight: regular;\")\n            main_layout.addWidget(text_label)\n\n        # \u2b07\ufe0f Add timestamp label\n        timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n        timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n        main_layout.addWidget(timestamp_label)\n\n        # \u2b07\ufe0f Add transformation buttons\n        button_layout = QHBoxLayout()\n        button_layout.setSpacing(12)\n        button_layout.setAlignment(Qt.AlignLeft)\n        buttons = []\n\n        def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n            btn = QPushButton()\n            btn.setIcon(QIcon(icon_path))\n            btn.setIconSize(QSize(16, 16))\n            btn.setToolTip(tooltip)\n            btn.setFixedSize(32, 28)\n            btn.clicked.connect(lambda _, t=text: handler(t))\n\n            effect = QGraphicsOpacityEffect()\n            effect.setOpacity(0.0)\n            btn.setGraphicsEffect(effect)\n            btn.setEnabled(False)\n\n            fade_anim = QPropertyAnimation(effect, b\"opacity\")\n            fade_anim.setDuration(300)\n            fade_anim.setStartValue(0.0)\n            fade_anim.setEndValue(1.0)\n            fade_anim.setEasingCurve(QEasingCurve.OutQuad)\n\n            btn.setStyleSheet(f\"\"\"\n                QPushButton {{\n                    background-color: transparent;\n                    border-radius: 2px;\n                    padding: 4px;\n                    border: 1px solid green;\n                }}\n                QPushButton:hover {{\n                    background-color: #5a5a5a;\n                }}\n            \"\"\")\n\n            btn._fade_anim = fade_anim\n\n            def animate_in():\n                btn.setEnabled(True)\n                fade_anim.setDirection(QPropertyAnimation.Forward)\n                fade_anim.start()\n\n            def animate_out():\n                fade_anim.setDirection(QPropertyAnimation.Backward)\n                fade_anim.start()\n                btn.setEnabled(False)\n\n            btn.animate_in = animate_in\n            btn.animate_out = animate_out\n\n            button_layout.addWidget(btn)\n            buttons.append((btn, effect))\n\n        # Add buttons after defining the function\n        add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n        add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n        add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n        add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n        add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n        main_layout.addLayout(button_layout)\n        item_widget.setLayout(main_layout)\n        item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n        def enterEvent(event, btns=buttons):\n            for btn, _ in btns:\n                btn.animate_in()\n            QWidget.enterEvent(item_widget, event)\n\n        def leaveEvent(event, btns=buttons):\n            for btn, _ in btns:\n                btn.animate_out()\n            QWidget.leaveEvent(item_widget, event)\n\n        item_widget.enterEvent = enterEvent\n        item_widget.leaveEvent = leaveEvent\n\n        container = QWidget()\n        container_layout = QVBoxLayout(container)\n        container_layout.setContentsMargins(0, 0, 18, 18)\n        container_layout.addWidget(item_widget)\n\n        list_item = QListWidgetItem()\n        list_item.setSizeHint(container.sizeHint())\n        list_item.setData(Qt.UserRole, text)\n        self.list_widget.addItem(list_item)\n        self.list_widget.setItemWidget(list_item, container)\n\n\n        \ndef filter_history(self, text):\n    filtered = [\n        item for item in self.history\n        if text.lower() in item.get(\"text\", \"\").lower()\n    ]\n    self.update_list(filtered)\n\n\ndef item_clicked(self, item):\n    if self.on_item_selected:\n        self.on_item_selected(item.data(Qt.UserRole))\n    self.close()\n\ndef show_context_menu(self, position):\n    selected_item = self.list_widget.itemAt(position)\n    if not selected_item:\n        return\n\n    original = selected_item.data(Qt.UserRole)\n    if original is None:\n        # Fallback to text content if no data was set\n        original = selected_item.text()\n    original = original or \"\"\n\n\n    menu = QMenu()\n    menu = QMenu()\n\n    edit_action = menu.addAction(\"\u270f\ufe0f Edit & Paste\")\n    upper_action = menu.addAction(\"\ud83d\udd20 UPPERCASE\")\n    lower_action = menu.addAction(\"\ud83d\udd21 lowercase\")\n    strip_action = menu.addAction(\"\ud83e\uddf9 Strip whitespace\")\n    clean_action = menu.addAction(\"\ud83d\udebf Remove formatting\")\n\n    action = menu.exec_(self.list_widget.viewport().mapToGlobal(position))\n\n    if not action:\n        return\n\n    transformed = original\n\n    if action == edit_action:\n        edited, ok = QInputDialog.getMultiLineText(self, \"Edit Text\", \"Modify the text:\", original)\n        if ok and edited.strip():\n            transformed = edited.strip()\n        else:\n            return\n    elif action == upper_action:\n        transformed = (original or \"\").upper()\n\n    elif action == lower_action:\n        transformed = original.lower()\n    elif action == strip_action:\n        transformed = original.strip()\n    elif action == clean_action:\n        transformed = re.sub(r'\\s+', ' ', original).strip()\n\n\n    if action != edit_action:\n        dialog = TransformPreviewDialog(original, transformed, self)\n        if dialog.exec_() != QDialog.Accepted:\n            return\n        transformed = dialog.get_transformed_text()\n        \n\n    if self.on_item_selected and transformed:\n        self.on_item_selected(transformed)\n    self.close()\ni am creating a smart clipboard and i want this program to display copied image but it is showing file path of an image",
    "type": "code",
    "timestamp": "2025-04-25 18:06:08"
  },
  {
    "text": "def update_list(self, items=None):\n    self.list_widget.clear()\n    items = items or self.history\n\n    for item in items:\n        content_type = item.get(\"type\", \"text\")\n        text = item.get(\"text\", \"\")\n        timestamp = item.get(\"timestamp\") or \"Unknown time\"\n\n        # Create the item widget and main layout FIRST\n        item_widget = QWidget()\n        main_layout = QVBoxLayout()\n        main_layout.setContentsMargins(12, 20, 12, 8)\n        main_layout.setSpacing(6)\n\n        # Check if content is an image\n        if content_type == \"image\" and os.path.exists(text):\n            print(f\"Loading image from: {text}\")  # Debugging line\n\n            image_label = QLabel()\n            pixmap = QPixmap(text)\n            \n            # Check if the image was successfully loaded\n            if pixmap.isNull():\n                print(f\"Failed to load image from: {text}\")\n                image_label.setText(\"Failed to load image\")  # Show an error text if image fails to load\n            else:\n                pixmap = pixmap.scaled(300, 300, Qt.KeepAspectRatio, Qt.SmoothTransformation)\n                image_label.setPixmap(pixmap)\n            \n            main_layout.addWidget(image_label)\n        else:\n            # Prepare snippet for text display\n            snippet = text[:60]\n            text_label = QLabel(snippet + (\"...\" if len(text) > 60 else \"\"))\n            text_label.setStyleSheet(\"font-weight: regular;\")\n            main_layout.addWidget(text_label)\n\n        # Add timestamp label\n        timestamp_label = QLabel(f\"{content_type.upper()} \u2022 {timestamp}\")\n        timestamp_label.setStyleSheet(\"color: #888; font-size: 10px;\")\n        main_layout.addWidget(timestamp_label)\n\n        # Add transformation buttons (same as before)\n        button_layout = QHBoxLayout()\n        button_layout.setSpacing(12)\n        button_layout.setAlignment(Qt.AlignLeft)\n        buttons = []\n\n        # Function to add buttons (same as before)\n        def add_btn(icon_path, tooltip, handler, text, color=\"#3a3a3a\"):\n            # Button creation logic (same as before)\n            ...\n\n        # Add buttons after defining the function\n        add_btn(\"icons/pen.png\", \"Edit & Paste\", self.handle_edit, text)\n        add_btn(\"icons/uppercase-interface-button.png\", \"UPPERCASE\", lambda t: self.handle_transform(t.upper()), text)\n        add_btn(\"icons/lowercase-interface-symbol.png\", \"lowercase\", lambda t: self.handle_transform(t.lower()), text)\n        add_btn(\"icons/strip.png\", \"Strip\", lambda t: self.handle_transform(t.strip()), text)\n        add_btn(\"icons/clean.png\", \"Clean\", lambda t: self.handle_transform(re.sub(r'\\s+', ' ', t).strip()), text)\n\n        main_layout.addLayout(button_layout)\n        item_widget.setLayout(main_layout)\n        item_widget.setStyleSheet(\"QWidget { background-color: transparent; }\")\n\n        # Event handling for hover effects (same as before)\n        ...\n\n        container = QWidget()\n        container_layout = QVBoxLayout(container)\n        container_layout.setContentsMargins(0, 0, 18, 18)\n        container_layout.addWidget(item_widget)\n\n        list_item = QListWidgetItem()\n        list_item.setSizeHint(container.sizeHint())\n        list_item.setData(Qt.UserRole, text)\n        self.list_widget.addItem(list_item)\n        self.list_widget.setItemWidget(list_item, container)",
    "type": "code",
    "timestamp": "2025-04-25 18:02:33"
  },
  {
    "text": "file:///home/guest/Downloads/competitor-analysis.png",
    "type": "text",
    "timestamp": "2025-04-25 17:44:52"
  }
]